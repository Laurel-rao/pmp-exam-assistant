generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  phone           String           @unique
  password        String
  avatar          String?
  status          Int              @default(1)
  lastLogin       DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  exams           Exam[]
  examRecords     ExamRecord[]
  favorites       Favorite[]
  questionRecords QuestionRecord[]
  userRoles       UserRole[]

  @@map("users")
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  code        String     @unique
  description String?
  status      Int        @default(1)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  roleMenus   RoleMenu[]
  userRoles   UserRole[]

  @@map("roles")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Menu {
  id         String     @id @default(cuid())
  name       String
  path       String?
  icon       String?
  component  String?
  parentId   String?
  sort       Int        @default(0)
  type       Int        @default(1)
  permission String?
  status     Int        @default(1)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  parent     Menu?      @relation("MenuParent", fields: [parentId], references: [id])
  children   Menu[]     @relation("MenuParent")
  roleMenus  RoleMenu[]

  @@map("menus")
}

model RoleMenu {
  id     String @id @default(cuid())
  roleId String
  menuId String
  menu   Menu   @relation(fields: [menuId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, menuId])
  @@map("role_menus")
}

model Question {
  id              String           @id @default(cuid())
  type            String
  content         String
  options         Json
  answer          String
  explanation     String
  category        String
  difficulty      Int
  status          Int              @default(1)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  examAnswers     ExamAnswer[]
  examQuestions   ExamQuestion[]
  favorites       Favorite[]
  questionRecords QuestionRecord[]

  @@map("questions")
}

model ExamRecord {
  id            String         @id @default(cuid())
  userId        String
  type          String
  score         Int
  totalCount    Int
  correctCount  Int
  duration      Int
  startTime     DateTime
  endTime       DateTime?
  status        String         @default("ongoing")
  createdAt     DateTime       @default(now())
  examQuestions ExamQuestion[]
  user          User           @relation(fields: [userId], references: [id])

  @@map("exam_records")
}

model ExamQuestion {
  id         String     @id @default(cuid())
  examId     String
  questionId String
  userAnswer String?
  isCorrect  Boolean?
  timeSpent  Int?
  createdAt  DateTime   @default(now())
  exam       ExamRecord @relation(fields: [examId], references: [id], onDelete: Cascade)
  question   Question   @relation(fields: [questionId], references: [id])

  @@map("exam_questions")
}

model QuestionRecord {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  userAnswer String
  isCorrect  Boolean
  timeSpent  Int
  mode       String
  createdAt  DateTime @default(now())
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("question_records")
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  createdAt  DateTime @default(now())
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, questionId])
  @@map("favorites")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_configs")
}

model Exam {
  id               String       @id @default(cuid())
  userId           String
  score            Int
  duration         Int
  totalQuestions   Int
  correctQuestions Int
  status           String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers          ExamAnswer[]

  @@index([userId])
}

model ExamAnswer {
  id         String   @id @default(cuid())
  examId     String
  questionId String
  userAnswer String
  isCorrect  Boolean
  createdAt  DateTime @default(now())
  exam       Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([examId])
  @@index([questionId])
}
