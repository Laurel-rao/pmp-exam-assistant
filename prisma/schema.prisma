// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  phone         String    @unique  // 手机号，必填且唯一
  password      String    // 密码，必填
  avatar        String?   // 头像
  status        Int       @default(1) // 状态：1-正常 0-禁用
  lastLogin     DateTime? // 最后登录时间
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 角色关联
  userRoles     UserRole[]

  // 学习相关
  examRecords      ExamRecord[]     // 考试记录
  questionRecords  QuestionRecord[] // 答题记录
  favorites        Favorite[]       // 收藏题目
  exams            Exam[]           // 模拟考试
  
  @@map("users")
}

// 角色模型
model Role {
  id          String   @id @default(cuid())
  name        String   @unique // 角色名称
  code        String   @unique // 角色代码
  description String?  // 角色描述
  status      Int      @default(1) // 状态：1-正常 0-禁用
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联
  userRoles     UserRole[]
  roleMenus     RoleMenu[]

  @@map("roles")
}

// 用户角色关联表
model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

// 菜单模型
model Menu {
  id          String   @id @default(cuid())
  name        String   // 菜单名称
  path        String?  // 菜单路径
  icon        String?  // 菜单图标
  component   String?  // 组件路径
  parentId    String?  // 父菜单ID
  sort        Int      @default(0) // 排序
  type        Int      @default(1) // 类型：1-菜单 2-按钮
  permission  String?  // 权限标识
  status      Int      @default(1) // 状态：1-显示 0-隐藏
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 自关联
  parent      Menu?     @relation("MenuParent", fields: [parentId], references: [id])
  children    Menu[]    @relation("MenuParent")
  
  // 角色菜单关联
  roleMenus   RoleMenu[]

  @@map("menus")
}

// 角色菜单关联表
model RoleMenu {
  id     String @id @default(cuid())
  roleId String
  menuId String
  
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  menu   Menu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@unique([roleId, menuId])
  @@map("role_menus")
}

// 题目模型
model Question {
  id          String   @id @default(cuid())
  type        String   // 题目类型：single-单选、multiple-多选
  content     String   // 题目内容
  options     Json     // 选项 JSON 格式
  answer      String   // 正确答案
  explanation String   // 解析
  category    String   // 知识领域分类
  difficulty  Int      // 难度等级 1-5
  status      Int      @default(1) // 状态：1-启用 0-禁用
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联
  questionRecords QuestionRecord[] // 答题记录
  examQuestions   ExamQuestion[]   // 考试题目关联
  favorites       Favorite[]       // 收藏记录
  examAnswers     ExamAnswer[]     // 模拟考试答题记录

  @@map("questions")
}

// 考试记录模型
model ExamRecord {
  id        String   @id @default(cuid())
  userId    String
  type      String   // 考试类型：practice-练习模式 exam-考试模式
  score     Int      // 得分
  totalCount Int     // 总题数
  correctCount Int   // 正确题数
  duration  Int      // 考试用时（分钟）
  startTime DateTime // 开始时间
  endTime   DateTime? // 结束时间
  status    String   @default("ongoing") // 状态：ongoing-进行中 completed-已完成
  createdAt DateTime @default(now())

  // 关联
  user          User           @relation(fields: [userId], references: [id])
  examQuestions ExamQuestion[] // 考试题目

  @@map("exam_records")
}

// 考试题目关联模型
model ExamQuestion {
  id           String     @id @default(cuid())
  examId       String
  questionId   String
  userAnswer   String?    // 用户答案
  isCorrect    Boolean?   // 是否正确
  timeSpent    Int?       // 答题用时（秒）
  createdAt    DateTime   @default(now())

  // 关联
  exam         ExamRecord @relation(fields: [examId], references: [id], onDelete: Cascade)
  question     Question   @relation(fields: [questionId], references: [id])

  @@map("exam_questions")
}

// 单题答题记录模型
model QuestionRecord {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  userAnswer String   // 用户答案
  isCorrect  Boolean  // 是否正确
  timeSpent  Int      // 答题用时（秒）
  mode       String   // 练习模式：practice-练习 exam-考试
  createdAt  DateTime @default(now())

  // 关联
  user     User     @relation(fields: [userId], references: [id])
  question Question @relation(fields: [questionId], references: [id])

  @@map("question_records")
}

// 收藏题目模型
model Favorite {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  createdAt  DateTime @default(now())

  // 关联
  user     User     @relation(fields: [userId], references: [id])
  question Question @relation(fields: [questionId], references: [id])

  @@unique([userId, questionId])
  @@map("favorites")
}

// 系统配置模型
model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique // 配置键
  value String // 配置值
  description String? // 配置描述
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_configs")
}

// 模拟考试记录
model Exam {
  id               String       @id @default(cuid())
  userId           String
  score            Int          // 分数
  duration         Int          // 用时（秒）
  totalQuestions   Int          // 总题目数
  correctQuestions Int          // 正确题数
  status           String       // 状态（completed, abandoned）
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers          ExamAnswer[]

  @@index([userId])
}

// 考试答题记录
model ExamAnswer {
  id         String   @id @default(cuid())
  examId     String
  questionId String
  userAnswer String   // 用户答案
  isCorrect  Boolean  // 是否正确
  createdAt  DateTime @default(now())
  exam       Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([examId])
  @@index([questionId])
}
